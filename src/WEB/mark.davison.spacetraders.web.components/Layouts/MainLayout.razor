@inherits LayoutComponentBase

@inject IAuthenticationConfig authConfig
@inject IAuthenticationContext authContext

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Outlined.QuestionMark" Color="Color.Inherit" />
        <MudText Typo="Typo.h4" Class="app-title">Spacetraders</MudText>
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />   
        <span data-testid="@DataTestIds.Username">@authContext.User?.preferred_username</span>
        <MudMenu AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" Size="Size.Large">
            <ActivatorContent>
                <MudIconButton data-testid="@DataTestIds.ManageIcon" Icon="@Icons.Material.Filled.AccountCircle" Color="Color.Inherit" Edge="Edge.End" />
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem Href="@authConfig.LogoutEndpoint">Logout</MudMenuItem>
            </ChildContent>
        </MudMenu>
    </MudAppBar>
    <MudDrawer Elevation="2" @bind-Open="@_drawerOpen" ClipMode="DrawerClipMode.Always">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer>
            <AppBody>
                @Body
            </AppBody>
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;
    private bool _isDarkMode;
    private MudThemeProvider? _mudThemeProvider;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _mudThemeProvider != null)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task OnSystemPreferenceChanged(bool newValue)
    {
        _isDarkMode = newValue;
        await InvokeAsync(StateHasChanged);
    }
}

