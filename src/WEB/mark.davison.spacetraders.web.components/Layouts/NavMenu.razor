@inherits FluxorComponent

@inject NavigationManager _navigationManager;

<MudNavMenu>
    <MudNavLink Href="@Routes.Accounts" Match="NavLinkMatch.Prefix">Account</MudNavLink>
    @if (identifier is string id)
    {
        <MudNavLink Href="@RouteHelpers.Contracts(id)" 
                    Match="NavLinkMatch.Prefix">Contracts</MudNavLink>
        <MudNavLink Href="@RouteHelpers.Ships(id)" 
                    Match="NavLinkMatch.Prefix">Ships</MudNavLink>
        <MudNavLink Href="@RouteHelpers.Waypoints(id, GetHeadquartersSystem(id))" 
                    Match="NavLinkMatch.Prefix">Waypoints</MudNavLink>
    }
</MudNavMenu>

@code {

    private string GetHeadquartersSystem(string identifier)
    {
        // if (AgentState.Value.GetAgent(identifier)?.Headquarters is string hq)
        // {
        //     return WaypointsHelpers.GetSystemFromWaypoint(hq);
        // }

        return string.Empty;
    }

    [Inject]
    public required IStoreHelper StoreHelper { get; set; }

    protected override void OnInitialized()
    {
        _navigationManager.LocationChanged += async (s, e) => await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnParametersSetAsync()
    {
        await Task.CompletedTask;
        // if (!string.IsNullOrEmpty(identifier) && string.IsNullOrEmpty(GetHeadquartersSystem(identifier)))
        // {
        //     await StoreHelper.DispatchAndWaitForResponse<FetchAgentAction, UpdateAgentActionResponse>(new()
        //     {
        //         Identifier = identifier
        //     });
        // }
    }

    private string? identifier
    {
        get
        {
            var url = _navigationManager.ToBaseRelativePath(_navigationManager.Uri);

            var portions = url.Split('/').ToList();

            var accountsIndex = portions.IndexOf("accounts");

            if (accountsIndex == -1)
            {
                return null;
            }

            if (accountsIndex + 1 >= portions.Count)
            {
                return null;
            }

            return portions[accountsIndex + 1];
        }
    }

}